#include <math.h>

#define PI 3.1415

    /*Function that computes for the angle between the an anchor point and a relative point.
    @param relativePoint - a point on the points array that will get its angle with the anchor point.
    @param anchorPoint - the lowest x y values within the points array.
    @return the angle computed*/

double computeAngle(coordinates relativePoint, coordinates anchorPoint){
    return atan2(relativePoint.y - anchorPoint.y, relativePoint.x - anchorPoint.x) * (180.0 / PI);
}

    /*Function that determines if two progressing coordinates are clockwise or counter-clockwise
    @param points - an array containing all of the points.
    @param arrSize- number of points.
    @param anchorPoint - the lowest x y values within the points array.
    @return the array of angles computed.*/


double* getArrayOfAngles(coordinates points[], int arrSize, coordinates anchorPoint) {
    double *angles = malloc(arrSize * sizeof(double));;
    for (int i = 0; i < arrSize; i++) {
        angles[i] = computeAngle(points[i], anchorPoint); //compute for the angles of the lowest anchor point with tall the points.
    }
    return angles;
}

    /*Function that determines if two progressing coordinates are clockwise or counter-clockwise
    @param coord1 - an anchor point
    @param coord2- a point added to the stack that could be an anchor point.
    @param coord3- a that connects to coord2.
    @return -1 if clockwise and 1 if counter-clockwise.*/

int isClockwise(coordinates coord1, coordinates coord2, coordinates coord3) {
    int flag;
    double areaProduct = (coord2.x - coord1.x)*(coord3.y - coord1.y) - (coord2.y - coord1.y)*(coord3.x - coord1.x);
    if (areaProduct < 0){ //A negative area means that it turns clockwise
        flag = -1;
    }
    else
    {
        flag = 1; //Positive area means that it is counter-clockwise.
    }
    return flag;               
}

